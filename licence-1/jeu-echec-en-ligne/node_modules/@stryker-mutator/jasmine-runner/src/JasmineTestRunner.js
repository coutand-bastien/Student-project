"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var test_runner_1 = require("@stryker-mutator/api/test_runner");
var helpers_1 = require("./helpers");
var plugin_1 = require("@stryker-mutator/api/plugin");
var util_1 = require("@stryker-mutator/util");
var JasmineTestRunner = /** @class */ (function () {
    function JasmineTestRunner(fileNames, options) {
        this.fileNames = fileNames;
        this.Date = Date; // take Date prototype now we still can (user might choose to mock it away)
        this.jasmineConfigFile = options.jasmineConfigFile;
    }
    JasmineTestRunner.prototype.run = function (options) {
        this.clearRequireCache();
        var tests = [];
        var startTimeCurrentSpec = 0;
        var jasmine = this.createJasmineRunner();
        var self = this;
        if (options.testHooks) {
            helpers_1.evalGlobal(options.testHooks);
        }
        return new Promise(function (resolve) {
            var reporter = {
                specStarted: function () {
                    startTimeCurrentSpec = new self.Date().getTime();
                },
                specDone: function (result) {
                    tests.push(helpers_1.toStrykerTestResult(result, new self.Date().getTime() - startTimeCurrentSpec));
                },
                jasmineDone: function () {
                    resolve({
                        errorMessages: [],
                        status: test_runner_1.RunStatus.Complete,
                        tests: tests
                    });
                }
            };
            jasmine.addReporter(reporter);
            jasmine.execute();
        }).catch(function (error) { return ({
            errorMessages: ['An error occurred while loading your jasmine specs' + os_1.EOL + util_1.errorToString(error)],
            status: test_runner_1.RunStatus.Error,
            tests: []
        }); });
    };
    JasmineTestRunner.prototype.createJasmineRunner = function () {
        var jasmine = new helpers_1.Jasmine({ projectBaseDir: process.cwd() });
        // The `loadConfigFile` will fallback on the default
        jasmine.loadConfigFile(this.jasmineConfigFile);
        jasmine.stopSpecOnExpectationFailure(true);
        jasmine.env.throwOnExpectationFailure(true);
        jasmine.exit = function () { };
        jasmine.clearReporters();
        jasmine.randomizeTests(false);
        return jasmine;
    };
    JasmineTestRunner.prototype.clearRequireCache = function () {
        this.fileNames.forEach(function (fileName) {
            delete require.cache[fileName];
        });
    };
    JasmineTestRunner.inject = plugin_1.tokens(plugin_1.commonTokens.sandboxFileNames, plugin_1.commonTokens.options);
    return JasmineTestRunner;
}());
exports.default = JasmineTestRunner;
//# sourceMappingURL=JasmineTestRunner.js.map