"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var path = require("path");
var fs = require("fs");
var ts = require("typescript");
var flatMap = require("lodash.flatmap");
var ScriptFile_1 = require("./ScriptFile");
var tsHelpers_1 = require("../helpers/tsHelpers");
var core_1 = require("@stryker-mutator/api/core");
var libRegex = /^lib\.(?:\w|\.)*\.?d\.ts$/;
var TranspilingLanguageService = /** @class */ (function () {
    function TranspilingLanguageService(compilerOptions, rootFiles, projectDirectory, produceSourceMaps, getLogger) {
        var _this = this;
        this.projectDirectory = projectDirectory;
        this.produceSourceMaps = produceSourceMaps;
        this.files = Object.create(null);
        this.compilerOptions = this.adaptCompilerOptions(compilerOptions);
        rootFiles.forEach(function (file) { return _this.files[file.name] = new ScriptFile_1.default(file.name, file.textContent); });
        var host = this.createLanguageServiceHost();
        this.languageService = ts.createLanguageService(host);
        this.logger = getLogger(TranspilingLanguageService.name);
        this.diagnosticsFormatter = {
            getCanonicalFileName: function (fileName) { return fileName; },
            getCurrentDirectory: function () { return projectDirectory; },
            getNewLine: function () { return os.EOL; }
        };
    }
    /**
     * Adapts compiler options to emit sourceMap files and disable other options for performance reasons
     *
     * @param source The unchanged compiler options
     */
    TranspilingLanguageService.prototype.adaptCompilerOptions = function (source) {
        var compilerOptions = Object.assign({}, source);
        compilerOptions.sourceMap = this.produceSourceMaps;
        compilerOptions.inlineSourceMap = false;
        compilerOptions.declaration = false;
        return compilerOptions;
    };
    /**
     * Replaces the content of the given text files
     * @param mutantCandidate The mutant used to replace the original source
     */
    TranspilingLanguageService.prototype.replace = function (replacements) {
        var _this = this;
        replacements.forEach(function (replacement) {
            return _this.files[replacement.name].replace(replacement.textContent);
        });
    };
    TranspilingLanguageService.prototype.getSemanticDiagnostics = function (files) {
        var _this = this;
        var fileNames = files.map(function (file) { return file.name; });
        var errors = flatMap(fileNames, function (fileName) { return _this.languageService.getSemanticDiagnostics(tsHelpers_1.normalizeFileForTypescript(fileName)); });
        return ts.formatDiagnostics(errors, this.diagnosticsFormatter);
    };
    /**
     * Get the output text file for given source file
     * @param sourceFile Emit output file based on this source file
     * @return  Map<TextFile> Returns a map of source file names with their output files.
     *          If all output files are bundled together, only returns the output file once using the first file as key
     */
    TranspilingLanguageService.prototype.emit = function (fileName) {
        var emittedFiles = this.languageService.getEmitOutput(fileName).outputFiles;
        var jsFile = emittedFiles.find(tsHelpers_1.isJavaScriptFile);
        var mapFile = emittedFiles.find(tsHelpers_1.isMapFile);
        if (jsFile) {
            var outputFiles = [new core_1.File(tsHelpers_1.normalizeFileFromTypescript(jsFile.name), jsFile.text)];
            if (mapFile) {
                outputFiles.push(new core_1.File(tsHelpers_1.normalizeFileFromTypescript(mapFile.name), mapFile.text));
            }
            return { singleResult: !!this.compilerOptions.outFile, outputFiles: outputFiles };
        }
        else {
            throw new Error("Emit error! Could not emit file " + fileName);
        }
    };
    TranspilingLanguageService.prototype.createLanguageServiceHost = function () {
        var _this = this;
        return {
            directoryExists: ts.sys.directoryExists,
            fileExists: ts.sys.fileExists,
            getCompilationSettings: function () { return _this.compilerOptions; },
            getCurrentDirectory: function () { return path.resolve(_this.projectDirectory); },
            getDefaultLibFileName: ts.getDefaultLibFileName,
            getDirectories: ts.sys.getDirectories,
            getScriptFileNames: function () { return Object.keys(_this.files); },
            getScriptSnapshot: function (fileName) {
                _this.pullFileIntoMemoryIfNeeded(fileName);
                return _this.files[fileName] && ts.ScriptSnapshot.fromString(_this.files[fileName].content);
            },
            getScriptVersion: function (fileName) {
                _this.pullFileIntoMemoryIfNeeded(fileName);
                return _this.files[fileName] && _this.files[fileName].version.toString();
            },
            readDirectory: ts.sys.readDirectory,
            readFile: ts.sys.readFile
        };
    };
    TranspilingLanguageService.prototype.pullFileIntoMemoryIfNeeded = function (fileName) {
        if (!this.files[fileName]) {
            var resolvedFile = this.resolveFileName(fileName);
            if (fs.existsSync(resolvedFile)) {
                this.logger.debug('Pulling file into memory: %s', fileName);
                this.files[fileName] = new ScriptFile_1.default(fileName, fs.readFileSync(resolvedFile, 'utf8'));
            }
            else {
                this.logger.error("File " + resolvedFile + " does not exist.");
            }
        }
    };
    TranspilingLanguageService.prototype.resolveFileName = function (fileName) {
        if (fileName.match(libRegex)) {
            var typescriptLocation = require.resolve('typescript');
            var newFileName = path.resolve(path.dirname(typescriptLocation), fileName);
            this.logger.debug("Resolving lib file " + fileName + " to " + newFileName);
            return newFileName;
        }
        else {
            return fileName;
        }
    };
    return TranspilingLanguageService;
}());
exports.default = TranspilingLanguageService;
//# sourceMappingURL=TranspilingLanguageService.js.map