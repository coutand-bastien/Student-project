"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tsHelpers_1 = require("../helpers/tsHelpers");
/**
 * Represents a transpile filter. This is the component that decides on which files needs to be transpiled.
 *
 * It is implemented using the composite pattern.
 * If there is a tsConfig, that will be used. If not, a default is used (transpile all TS-like files)
 */
var TranspileFilter = /** @class */ (function () {
    function TranspileFilter() {
    }
    TranspileFilter.create = function (options) {
        var parsedCommandLine = tsHelpers_1.getTSConfig(options);
        if (parsedCommandLine) {
            return new TSConfigFilter(parsedCommandLine);
        }
        else {
            return new DefaultFilter();
        }
    };
    return TranspileFilter;
}());
exports.default = TranspileFilter;
/**
 * A transpile filter based on ts config
 */
var TSConfigFilter = /** @class */ (function (_super) {
    tslib_1.__extends(TSConfigFilter, _super);
    function TSConfigFilter(_a) {
        var fileNames = _a.fileNames;
        var _this = _super.call(this) || this;
        _this.fileNames = fileNames.map(tsHelpers_1.normalizeFileFromTypescript);
        return _this;
    }
    TSConfigFilter.prototype.isIncluded = function (fileName) {
        return this.fileNames.indexOf(fileName) !== -1;
    };
    return TSConfigFilter;
}(TranspileFilter));
exports.TSConfigFilter = TSConfigFilter;
/**
 * A default transpile filter based on file extension
 */
var DefaultFilter = /** @class */ (function (_super) {
    tslib_1.__extends(DefaultFilter, _super);
    function DefaultFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultFilter.prototype.isIncluded = function (fileName) {
        return tsHelpers_1.isTypescriptFile(fileName);
    };
    return DefaultFilter;
}(TranspileFilter));
exports.DefaultFilter = DefaultFilter;
//# sourceMappingURL=TranspileFilter.js.map