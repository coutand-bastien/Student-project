"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var NodeMutator_1 = require("./NodeMutator");
var StringLiteralMutator = /** @class */ (function (_super) {
    tslib_1.__extends(StringLiteralMutator, _super);
    function StringLiteralMutator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'StringLiteral';
        return _this;
    }
    StringLiteralMutator.prototype.guard = function (node) {
        switch (node.kind) {
            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.TemplateExpression:
            case ts.SyntaxKind.FirstTemplateToken:
                return true;
            default:
                return false;
        }
    };
    StringLiteralMutator.prototype.isInvalidParent = function (parent) {
        switch (parent.kind) {
            case ts.SyntaxKind.ImportDeclaration:
            case ts.SyntaxKind.ExportDeclaration:
            case ts.SyntaxKind.ModuleDeclaration:
            case ts.SyntaxKind.ExternalModuleReference:
            case ts.SyntaxKind.LastTypeNode:
            case ts.SyntaxKind.JsxAttribute:
            case ts.SyntaxKind.ExpressionStatement:
            case ts.SyntaxKind.LiteralType:
                return true;
            default:
                return false;
        }
    };
    StringLiteralMutator.prototype.identifyReplacements = function (str) {
        if (str.parent && this.isInvalidParent(str.parent)) {
            return [];
        }
        if (this.isEmpty(str)) {
            return [{ node: str, replacement: '"Stryker was here!"' }];
        }
        else {
            return [{ node: str, replacement: '""' }];
        }
    };
    StringLiteralMutator.prototype.isEmpty = function (str) {
        function isEmptyString() {
            return str.kind === ts.SyntaxKind.StringLiteral && str.text === '';
        }
        function isEmptyTemplate() {
            return (str.kind === ts.SyntaxKind.FirstTemplateToken && str.text === '');
        }
        return isEmptyString() || isEmptyTemplate();
    };
    return StringLiteralMutator;
}(NodeMutator_1.default));
exports.default = StringLiteralMutator;
//# sourceMappingURL=StringLiteralMutator.js.map