"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var NodeMutator_1 = require("./NodeMutator");
var tsHelpers_1 = require("../helpers/tsHelpers");
var ForStatementMutator = /** @class */ (function (_super) {
    tslib_1.__extends(ForStatementMutator, _super);
    function ForStatementMutator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'ForStatement';
        return _this;
    }
    ForStatementMutator.prototype.guard = function (node) {
        return node.kind === ts.SyntaxKind.ForStatement;
    };
    ForStatementMutator.prototype.identifyReplacements = function (node, sourceFile) {
        if (node.condition) {
            return [{ node: node.condition, replacement: 'false' }];
        }
        else {
            // No node to replace. Happens when for statement is defined as `for(let i=0;;i++)`
            // Replace the entire node
            var replacement = tsHelpers_1.printNode(ts.createFor(node.initializer, ts.createFalse(), node.incrementor, node.statement), sourceFile);
            return [{ node: node, replacement: replacement }];
        }
    };
    return ForStatementMutator;
}(NodeMutator_1.default));
exports.default = ForStatementMutator;
//# sourceMappingURL=ForStatementMutator.js.map