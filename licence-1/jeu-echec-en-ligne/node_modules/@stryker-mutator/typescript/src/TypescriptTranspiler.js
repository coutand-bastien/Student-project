"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tsHelpers_1 = require("./helpers/tsHelpers");
var TranspilingLanguageService_1 = require("./transpiler/TranspilingLanguageService");
var TranspileFilter_1 = require("./transpiler/TranspileFilter");
var plugin_1 = require("@stryker-mutator/api/plugin");
var TypescriptTranspiler = /** @class */ (function () {
    function TypescriptTranspiler(options, produceSourceMaps, getLogger) {
        this.options = options;
        this.produceSourceMaps = produceSourceMaps;
        this.getLogger = getLogger;
        tsHelpers_1.guardTypescriptVersion();
        this.filter = TranspileFilter_1.default.create(this.options);
    }
    TypescriptTranspiler.prototype.transpile = function (files) {
        var typescriptFiles = this.filterIsIncluded(files);
        if (this.languageService) {
            this.languageService.replace(typescriptFiles);
        }
        else {
            this.languageService = this.createLanguageService(typescriptFiles);
        }
        var error = this.languageService.getSemanticDiagnostics(typescriptFiles);
        if (error.length) {
            return Promise.reject(new Error(error));
        }
        else {
            var resultFiles = this.transpileFiles(files);
            return Promise.resolve(resultFiles);
        }
    };
    TypescriptTranspiler.prototype.filterIsIncluded = function (files) {
        var _this = this;
        return files.filter(function (file) { return _this.filter.isIncluded(file.name); });
    };
    TypescriptTranspiler.prototype.createLanguageService = function (typescriptFiles) {
        var tsConfig = tsHelpers_1.getTSConfig(this.options);
        var compilerOptions = (tsConfig && tsConfig.options) || {};
        return new TranspilingLanguageService_1.default(compilerOptions, typescriptFiles, tsHelpers_1.getProjectDirectory(this.options), this.produceSourceMaps, this.getLogger);
    };
    TypescriptTranspiler.prototype.transpileFiles = function (files) {
        var _this = this;
        var isSingleOutput = false;
        var fileDictionary = {};
        files.forEach(function (file) { return fileDictionary[file.name] = file; });
        files.forEach(function (file) {
            if (!tsHelpers_1.isHeaderFile(file.name)) {
                if (_this.filter.isIncluded(file.name)) {
                    // File is to be transpiled. Only emit if more output is expected.
                    if (!isSingleOutput) {
                        var emitOutput = _this.languageService.emit(file.name);
                        isSingleOutput = emitOutput.singleResult;
                        emitOutput.outputFiles.forEach(function (file) { return fileDictionary[file.name] = file; });
                    }
                    // Remove original file
                    delete fileDictionary[file.name];
                }
            }
        });
        return Object.keys(fileDictionary).map(function (name) { return fileDictionary[name]; });
    };
    TypescriptTranspiler.inject = plugin_1.tokens(plugin_1.commonTokens.options, plugin_1.commonTokens.produceSourceMaps, plugin_1.commonTokens.getLogger);
    return TypescriptTranspiler;
}());
exports.default = TypescriptTranspiler;
//# sourceMappingURL=TypescriptTranspiler.js.map