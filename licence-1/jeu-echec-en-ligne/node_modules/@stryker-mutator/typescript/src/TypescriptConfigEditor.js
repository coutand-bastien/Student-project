"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var path = require("path");
var ts = require("typescript");
var keys_1 = require("./helpers/keys");
var fs = require("fs");
var tsHelpers_1 = require("./helpers/tsHelpers");
var plugin_1 = require("@stryker-mutator/api/plugin");
// Override some compiler options that have to do with code quality. When mutating, we're not interested in the resulting code quality
// See https://github.com/stryker-mutator/stryker/issues/391 for more info
var COMPILER_OPTIONS_OVERRIDES = Object.freeze({
    allowUnreachableCode: true,
    noUnusedLocals: false,
    noUnusedParameters: false
});
var TypescriptConfigEditor = /** @class */ (function () {
    function TypescriptConfigEditor(log) {
        this.log = log;
    }
    TypescriptConfigEditor.prototype.edit = function (strykerConfig, host) {
        if (host === void 0) { host = ts.sys; }
        this.loadTSConfig(strykerConfig, host);
    };
    TypescriptConfigEditor.prototype.loadTSConfig = function (strykerConfig, host) {
        if (typeof strykerConfig[keys_1.CONFIG_KEY_FILE] === 'string') {
            var tsconfigFileName = path.resolve(strykerConfig[keys_1.CONFIG_KEY_FILE]);
            this.log.info("Loading tsconfig file " + tsconfigFileName);
            var tsconfig = this.readTypescriptConfig(tsconfigFileName, host);
            if (tsconfig) {
                strykerConfig[keys_1.CONFIG_KEY] = this.overrideOptions(tsconfig);
            }
        }
        else {
            this.log.debug('No \'%s\' specified, not loading any config', keys_1.CONFIG_KEY_FILE);
        }
    };
    TypescriptConfigEditor.prototype.overrideOptions = function (tsConfig) {
        tsConfig.options = Object.assign({}, tsConfig.options, COMPILER_OPTIONS_OVERRIDES);
        tsConfig.fileNames = tsConfig.fileNames.map(tsHelpers_1.normalizeFileFromTypescript);
        return tsConfig;
    };
    TypescriptConfigEditor.prototype.readTypescriptConfig = function (tsconfigFileName, host) {
        var configFileBase = tsHelpers_1.normalizeFileForTypescript(path.dirname(tsconfigFileName));
        var configFileText = fs.readFileSync(tsconfigFileName, 'utf8');
        var tsconfigFileNameNormalizedForTypeScript = tsHelpers_1.normalizeFileForTypescript(tsconfigFileName);
        var parseResult = ts.parseConfigFileTextToJson(tsconfigFileNameNormalizedForTypeScript, configFileText);
        if (parseResult.error) {
            var error = ts.formatDiagnostics([parseResult.error], diagnosticsHost(configFileBase));
            throw new Error("Error while loading tsconfig file '" + tsconfigFileName + "': " + error);
        }
        else {
            var tsconfig = ts.parseJsonConfigFileContent(parseResult.config, host, configFileBase, { project: configFileBase }, tsconfigFileNameNormalizedForTypeScript);
            if (tsconfig.errors.length) {
                var error = ts.formatDiagnostics(tsconfig.errors, diagnosticsHost(configFileBase));
                this.log.error("Error while loading tsconfig file '" + tsconfigFileName + "': " + error);
            }
            return tsconfig;
        }
        function diagnosticsHost(configFileBase) {
            return {
                getCanonicalFileName: function (fileName) { return path.resolve(fileName); },
                getCurrentDirectory: function () { return configFileBase; },
                getNewLine: function () { return os.EOL; }
            };
        }
    };
    TypescriptConfigEditor.inject = plugin_1.tokens(plugin_1.commonTokens.logger);
    return TypescriptConfigEditor;
}());
exports.default = TypescriptConfigEditor;
//# sourceMappingURL=TypescriptConfigEditor.js.map